%% Import data from text file.
% Script for importing data from the following text file:
%
%    D:\Dropbox\Postdoc\Articles WIP\INFORMS RAS 2018 Problem Solving
%    Competition\Data\DriverSwitches.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/06/12 19:02:13

%% Initialize variables.
filename = [mainFolder 'DriverSwitches.txt'];

delimiter = ' ';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,4,6]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,4,6]);
rawCellColumns = raw(:, [1,3,5]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
PreviousTask = rawCellColumns(:, 1);
PreviousTrain = cell2mat(rawNumericColumns(:, 1));
NextTask = rawCellColumns(:, 2);
NextTrain = cell2mat(rawNumericColumns(:, 2));
AtLocation = rawCellColumns(:, 3);
Day1 = cell2mat(rawNumericColumns(:, 3));

%% restructure data
Nrows = length(PreviousTask)
clear DriverSwitch
tic
jj=1;
for ii = 1:Nrows   % for 5-9-2017
    DriverSwitch(jj).PreviousTask = PreviousTask{ii};
    DriverSwitch(jj).PreviousTrain = (PreviousTrain(ii));
    DriverSwitch(jj).NextTask = NextTask{ii};
    DriverSwitch(jj).NextTrain = (NextTrain(ii));
    DriverSwitch(jj).AtLocation = AtLocation{ii};
    DriverSwitch(jj).Day = (Day1(ii));    
    jj=jj+1;
end
toc 

%  Switches without PreviousTask and NextTask
% no PreviousTask: driver start from the base(office) and goes for his
% first task
StartDrivers = DriverSwitch(strcmp({DriverSwitch.PreviousTask},'-'));
% no NextTask: driver ends his shift and goes home
EndDrivers   = DriverSwitch(strcmp({DriverSwitch.NextTask},'-'));

% real switching between trains = both activities exist
% remove Switches without NextTask 
DriverSwitch(strcmp({DriverSwitch.NextTask},'-')) = [];
DriverSwitch(strcmp({DriverSwitch.PreviousTask},'-')) = [];

save('DriverSwitch', 'DriverSwitch')
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R PreviousTask PreviousTrain NextTask NextTrain AtLocation Day1

